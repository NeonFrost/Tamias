(defvar old-sub-state 'top)
(defvar equip-state nil)
(defvar moving nil)
(defstruct modifier-states
  control
  shift
  meta)
(defvar modifier-states (make-modifier-states))

(defun quit-game ()
  (sdl2:push-event :quit)
  )

(defun main-menu-keys-down (key)
  (case key
;;   (:scancode-up (change-selection 0))
;;   (:scancode-down (change-selection 1))
    )
  )

(defun main-menu-keys-up (key)
  (case key
    (:scancode-return (confirm-selection))
    (:scancode-escape (quit-game))
    (:scancode-z (setf state 'start-screen))
    )
  )

(defun start-screen-keys-down (key)
  (case key
;;   (:scancode-up (change-selection 0))
;;   (:scancode-down (change-selection 1))
    )
  )

(defun start-screen-keys-up (key)
  (case key
    (:scancode-z (setf state 'level))
    )
  )

(defun paused-keys-down (key)
  (case key
    (:scancode-up (change-selection 0))
    (:scancode-down (change-selection 1))
    )
  )

(defun paused-keys-up (key)
  (case key
    (:scancode-z (confirm-selection))
    (:scancode-x (case sub-state
		   (options (setf sub-state nil)
			    (setf selection 3))
		   (scores (setf sub-state nil)
			   (setf selection 2))
		   (otherwise (setf state 'level)
			      (setf selection 0))
		   ))
    )
  )

(defun level-keys-down (key)
  (case sub-state
    (top (case key
	   (:scancode-return (setf state 'paused))
	   (:scancode-e (if (modifier-states-shift modifier-states)
			    (setf equip-state 'armor)
			    (setf equip-state 'weapons))
			(setf state 'equip))
	   (:scancode-i (setf state 'inventory))
	   (:scancode-a (setf sub-state 'attack)
			(reset-text-buffer actions-buffer))
;;;;	   (:scancode-j (setf sub-state 'jumping))
	   (:scancode-f (setf sub-state 'target)
			(reset-text-buffer actions-buffer))
	   (:scancode-1 (setf moving 'south-west))
	   (:scancode-2 (setf moving 'south))
	   (:scancode-3 (setf moving 'south-east))
	   (:scancode-4 (setf moving 'west))
	   (:scancode-5 (setf moving 'player))
	   (:scancode-6 (setf moving 'east))
	   (:scancode-7 (setf moving 'north-west))
	   (:scancode-8 (setf moving 'north))
	   (:scancode-9 (setf moving 'north-east))
	   (:scancode-left (setf moving 'west))
	   (:scancode-right (setf moving 'east))
	   (:scancode-up (setf moving 'north))
	   (:scancode-down (setf moving 'south))
	   (:scancode-escape (quit-game))
	   (:scancode-l (setf sub-state 'look)
			(reset-text-buffer actions-buffer))
	   ))
    ((or look target) (case key
			(:scancode-e (if (not (eq (aref enemy-array (cursor-y cursor) (cursor-x cursor)) 0))
					 (setf sub-state 'enemy-information)))
			(:scancode-i (if (not (eq (aref item-array (cursor-y cursor) (cursor-x cursor)) 0))
					 (setf sub-state 'item-information)))
			(:scancode-1 (cursor-move 'south-west))
			(:scancode-2 (cursor-move 'south))
			(:scancode-3 (cursor-move 'south-east))
			(:scancode-4 (cursor-move 'west))
			(:scancode-5 (cursor-move 'player))
			(:scancode-6 (cursor-move 'east))
			(:scancode-7 (cursor-move 'north-west))
			(:scancode-8 (cursor-move 'north))
			(:scancode-9 (cursor-move 'north-east))
			(:scancode-left (cursor-move 'west))
			(:scancode-right (cursor-move 'east))
			(:scancode-up (cursor-move 'north))
			(:scancode-down (cursor-move 'south))
			(:scancode-return (fire-projectile player))
			))
    (attack (case key
	      (:scancode-1 (attack player :dir 'south-west))
	      (:scancode-2 (attack player :dir 'south))
	      (:scancode-3 (attack player :dir 'south-east))
	      (:scancode-4 (attack player :dir 'west))
	      (:scancode-5 (attack player :dir 'player))
	      (:scancode-6 (attack player :dir 'east))
	      (:scancode-7 (attack player :dir 'north-west))
	      (:scancode-8 (attack player :dir 'north))
	      (:scancode-9 (attack player :dir 'north-east))
	      (:scancode-down (attack player :dir 'south))
	      (:scancode-left (attack player :dir 'west))
	      (:scancode-right (attack player :dir 'east))
	      (:scancode-up (attack player :dir 'north))
	      )
	    (reset-text-buffer actions-buffer)
	    ))
  (case key
    (:scancode-x (case sub-state
		   (look (sdl2:destroy-texture cursor-buffer)
			 (setf cursor-buffer nil)
			 (setf sub-state 'top)
			 (reset-text-buffer actions-buffer))
		   (enemy-information (sdl2:destroy-texture information-buffer)
				      (setf information-buffer nil)
				      (setf sub-state 'look))
		   (item-information (sdl2:destroy-texture information-buffer)
				     (setf information-buffer nil)
				     (setf sub-state 'look))
		   (attacking (setf sub-state 'top)
			      (reset-text-buffer actions-buffer))
		   (otherwise (setf sub-state 'top)
			      (reset-text-buffer actions-buffer))
		   )
		 )))

(defun level-keys-up (key)
  )

(defun equip-keys-down (key)
  (case key
    (:scancode-x (setf state 'level)
		 (setf equip-state nil)
		 (reset-text-buffer equipment-title-buffer)
		 (reset-text-buffer equipment-buffer))
    ))

(defun equip-keys-up (key)
  (case key
    (:scancode-z (if (eq equip-state 'armor)
		     (print "equipped armor")
		     (print "equipped weapon")))
    ))

(defun game-over-keys-down (key)
  (case key
    (:scancode-z (quit-to-main-menu))
    ))

(defun game-over-keys-up (key)
  )

(defun change-selection (d &key (max-length 5))
  (case d
    ((0 up) (if (> selection 0)	   
		(decf selection 1)
		(setf selection max-length)))
    ((1 down) (if (< selection max-length)
		  (incf selection 1)
		  (setf selection 0)))
    ))


(defun inventory-keys-down (key)
  (let ((current-item selection)
	(inventory-length (case inventory-state
			    (items (1- (length (inventory-items players-inventory))))
			    (armor (1- (length (inventory-armor players-inventory))))
			    (weapons (1- (length (inventory-weapons players-inventory)))))))
    (case key
      (:scancode-up (change-selection 0 :max-length inventory-length))
      (:scancode-down (change-selection 1 :max-length inventory-length))
      (:scancode-1 (case sub-state
		     (top (setf inventory-state 'items)
			  (setf selection 0)
			  (reset-text-buffer inventory-buffer))))
      (:scancode-2 (case sub-state
		     (top (setf inventory-state 'armor)
			  (setf selection 0)
			  (reset-text-buffer inventory-buffer))))
      (:scancode-3 (case sub-state
		     (top (setf inventory-state 'weapons)
			  (setf selection 0)
			  (reset-text-buffer inventory-buffer))))
      (:scancode-e (if (eq sub-state 'item-information)
		       (if (eq inventory-state 'armor)
			   (print "equipped armor!");;;;equip armor onto the player
			   )
		       (if (eq inventory-state 'weapons)
			   (print "equipped weapon!")   ;;;equip weapon onto player
			   )))
      (:scancode-x (if (not (eq sub-state 'top))
		       (progn (setf sub-state old-sub-state)
			      (setf old-sub-state 'top)
			      (reset-text-buffer information-buffer))
		       (progn (setf state 'level)
			      (setf selection 0)
			      (reset-text-buffer inventory-buffer))
		       ))
      (:scancode-d (case inventory-state
		     (items (drop (nth current-item (inventory-items players-inventory))))
		     (armor (drop (nth current-item (inventory-armor players-inventory))))
		     (weapons (drop (nth current-item (inventory-weapons players-inventory)))))
		   (setf sub-state 'top)
		   (reset-text-buffer information-buffer)
		   )
      (:scancode-z  (setf sub-state 'item-information)
		    (setf old-sub-state 'top))
      (:scancode-return (setf sub-state 'item-information)
			(setf old-sub-state 'top));;;;go to the item information screen with the current item of (inventory-/inventory-state/ (player-inventory player))
      )))

(defun inventory-keys-up (key)
  )

(defun keydown-check (key)
  (case key
    ((or :scancode-lctrl :scancode-rctrl) (setf (modifier-states-control modifier-states) t))
    ((or :scancode-lshift :scancode-rshift) (setf (modifier-states-shift modifier-states) t))
    (:scancode-m (setf (player-level user) temple)
		 (setf volume-state 'track-changing))
    )
  (case state
    (title (main-menu-keys-down key))
    (equip (equip-keys-down key))
    (paused (paused-keys-down key))
    (credits (credits-keys-down key))
    (inventory (inventory-keys-down key))
    (level (level-keys-down key))
    (game-over (game-over-keys-down key))
    (start-screen (start-screen-keys-down key))
    )
  )

(defun keyup-check (key)
  (case key
    ((or :scancode-lctrl :scancode-rctrl) (setf (modifier-states-control modifier-states) nil))
    ((or :scancode-lshift :scancode-rshift) (setf (modifier-states-shift modifier-states) nil))
    )
  (case state
    (title (main-menu-keys-up key))
    (equip (equip-keys-up key))
    (paused (paused-keys-up key))
    (credits (credits-keys-up key))
    (inventory (inventory-keys-up key))
    (level (level-keys-up key))
    (game-over (game-over-keys-down key))
    (start-screen (start-screen-keys-up key))
    )
  )

