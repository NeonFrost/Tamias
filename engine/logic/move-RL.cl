(defvar direction-list '((north (0 -1))
			 (east (1 0))
			 (south (0 1))
			 (west (-1 0))
			 (north-west (-1 -1))
			 (north-east (1 -1))
			 (south-east (1 1))
			 (south-west (-1 1))))

(defgeneric entity-move (e &key direction)
  (:documentation "moves an entity"))

(defmethod entity-move ((e entity) &key direction)
  (let ((ends-turn nil))
    (if (player-character-p e)
	(progn (reset-messages)
	       (reset-text-buffer message-buffer)))
    (let* ((movement (+ (entity-agility e) (entity-agility-mod e)))
	   (move-x (* movement (car (cadr (assoc direction direction-list)))))
	   (move-y (* movement (cadr (cadr (assoc direction direction-list)))))
	   (space-x (+ (cadr (assoc :x (entity-position e))) move-x))
	   (space-y (+ (cadr (assoc :y (entity-position e))) move-y))
	   (object (cond ((string= (aref main-map space-y space-x) (cadr (assoc 'tree-trunk symbols-list)))
			  "tree")
			 ((string= (aref main-map space-y space-x) (cadr (assoc 'water symbols-list)))
			  "water")
			 ((string= (aref main-map space-y space-x) (cadr (assoc 'wall symbols-list)))
			  "wall")
			 ((not (eq (aref enemy-array space-y space-x) 0))
			  (entity-name (aref enemy-array space-y space-x)))
			 )))
      (if (not (or (string= (aref main-map space-y space-x) (cadr (assoc 'tree-trunk symbols-list)))
		   (string= (aref main-map space-y space-x) (cadr (assoc 'water symbols-list)))
		   (string= (aref main-map space-y space-x) (cadr (assoc 'wall symbols-list)))
		   (not (eq (aref enemy-array space-y space-x) 0))
		   ))
	  (progn (if (creature-p e)
		     (setf (aref enemy-array (entity-y e) (entity-x e)) 0))
		 (if (or (and (> (cadr (assoc :x (entity-position e))) 1)
			      (< move-x 0))
			 (and (< (cadr (assoc :x (entity-position e))) (- (cadr (array-dimensions main-map)) 2))
			      (> move-x 0)))
		     (progn (incf (cadr (assoc :x (entity-position e))) move-x)
			    (setf ends-turn t)))
		 (if (or (and (> (cadr (assoc :y (entity-position e))) 1)
			      (< move-y 0))
			 (and (< (cadr (assoc :y (entity-position e))) (- (car (array-dimensions main-map)) 2))
			      (> move-y 0)))
		     (progn (incf (cadr (assoc :y (entity-position e))) move-y)
			    (setf ends-turn t)))
		 (if (creature-p e)
		     (progn (setf (aref enemy-array (entity-y e) (entity-x e)) e)
			    (setf ends-turn t))))
	  (if (player-character-p e)
	      (push-message (concatenate 'string "There is a " object " in your way.")))))
    (if (eq e player)
	(progn (setf (cursor-x cursor) (cadr (assoc :x (entity-position player)))
		     (cursor-y cursor) (cadr (assoc :y (entity-position player))))
	       (create-message)))
    (if ends-turn
	(end-turn))))
