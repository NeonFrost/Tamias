(define-state ai-test)
(setf state 'ai-test)
#|
Idea for AI ''research'' (my first ai)
ai has goals of getting food, water, and [wood, clay, surplus water, metals] and then craft [mortar, brick, wood block, nails] for building
AI-entity :: global-position local-position hunger thirst materials HP
|#
(defvar message-accumulator nil)
(defvar error-message "This is an error message")
(defvar current-goal 'food)
(defstruct (ai-entity (:include entity
				(x 400)
				(y 300)))
  working
  searching
  moving
  full
  hydrated
  (food 100)
  (water 100)
  (surplus-water 0)
  (wood 0)
  (clay 0)
  (slate 0)
  (iron 0)
  (mortar 0)
  (brick 0)
  (ingot 0)
  (wood-block 0)
  (nails 0)
  (walls 0)
  (roofs 0)
  (doors 0)
  (houses 0)
  (factory 0)
  (electronics 0)
  (bots 0)
  )
;;center is 400 300
(defvar ai (make-ai-entity))
(defvar frame-ticks 0)
(defvar work-ticks 0)
(defvar work-areas '((food 300 200)
		     (wood 300 250)
		     (water 300 225)
		     (surplus-water 295 230)
		     (slate 325 210)
		     (clay 500 100)
		     (iron 550 200)
		     (mortar 400 350)
		     (brick 450 350)
		     (wood-block 375 350)
		     (nails 425 350)
		     (ingot 420 350);;furnace
		     (walls 325 350)
		     (roofs 340 370)
		     (doors 330 360)
		     (houses 375 400)
		     (factory 400 400)
		     (electronics 450 450)
		     (bots 500 500)))
(defvar work-progress '((wood 0)
			(iron 0)
			(mortar 0)
			(brick 0)
			(surplus-water 0)
			(slate 0)
			(wood-block 0)
			(nails 0)
			(ingot 0);;furnace
			(walls 0)
			(roofs 0)
			(doors 0)
			(houses 0)
			(factory 0)
			(electronics 0)
			(bots 0)))

(defun check-supplies ()
  (let ((full (ai-entity-full ai))
	(hydrated (ai-entity-hydrated ai))
	(food (ai-entity-food ai))
	(wood (ai-entity-wood ai))
	(water (ai-entity-water ai))
	(surplus-water (ai-entity-surplus-water ai))
	(clay (ai-entity-clay ai))
	(iron (ai-entity-iron ai))
	(slate (ai-entity-slate ai))
	(mortar (ai-entity-mortar ai))
	(ingot (ai-entity-ingot ai))
	(brick (ai-entity-brick ai))
	(wood-block (ai-entity-wood-block ai))
	(nails (ai-entity-nails ai))
	(walls (ai-entity-walls ai)) 
	(roofs (ai-entity-roofs ai)) 
	(doors (ai-entity-doors ai)) 
	(houses (ai-entity-houses ai)) 
	(factory (ai-entity-factory ai))
	(electronics (ai-entity-electronics ai))
	(bots (ai-entity-bots ai))
	(old-goal current-goal))
    (cond ((not full)
	   (setf current-goal 'food))
	  ((not hydrated)
	   (setf current-goal 'water))
	  ((< wood 50)
	   (setf current-goal 'wood))
	  ((< clay 50)
	   (setf current-goal 'clay))
	  ((< iron 50)
	   (setf current-goal 'iron))
	  ((< slate 50)
	   (setf current-goal 'slate))
	  ((< surplus-water 100)
	   (setf current-goal 'surplus-water))
	  ((< ingot 40)
	   (setf current-goal 'ingot))
	  ((< mortar 40)
	   (setf current-goal 'mortar))
	  ((< brick 40)
	   (setf current-goal 'brick))
	  ((< wood-block 40)
	   (setf current-goal 'wood-block))
	  ((< nails 30)
	   (setf current-goal 'nails))
	  ((< walls 4)
	   (setf current-goal 'walls))
	  ((< roofs 1)
	   (setf current-goal 'roofs))
	  ((< doors 2)
	   (setf current-goal 'doors))
	  ((< houses 100)
	   (setf current-goal 'houses))
	  ((< factory 100)
	   (setf current-goal 'factory))
	  ((< electronics 10)
	   (setf current-goal 'electronics))
	  ((< bots 100)
	   (setf current-goal 'bots))
	  )
    (setf (ai-entity-moving ai) t
	  (ai-entity-searching ai) nil)
    ))

(defun move-ai ()
  (let ((x-dir (if (< (ai-entity-x ai) (cadr (assoc current-goal work-areas)))
		   2
		   (if (> (ai-entity-x ai) (cadr (assoc current-goal work-areas)))
		       -2
		       0)))
	(y-dir (if (< (ai-entity-y ai) (caddr (assoc current-goal work-areas)))
		   2
		   (if (> (ai-entity-y ai) (caddr (assoc current-goal work-areas)))
		       -2
		       0))))
    (if (ai-entity-moving ai)
	(progn (incf (ai-entity-x ai) x-dir)
	       (incf (ai-entity-y ai) y-dir)))
    (let ((ai-y (ai-entity-y ai))
	  (ai-x (ai-entity-x ai))
	  (wa-x (cadr (assoc current-goal work-areas)))
	  (wa-y (caddr (assoc current-goal work-areas))))
      (if (and (> ai-x (- wa-x 4))
	       (< ai-x (+ wa-x 2))
	       (> ai-y (- wa-y 4))
	       (< ai-y (+ wa-y 2)))
	  (setf (ai-entity-working ai) current-goal
		(ai-entity-moving ai) nil)))
    ))

(defun error-message (message)
  (print message)
  (setf message-accumulator 0
	error-message message))

(defmacro work (entry)
  `(if (assoc ,entry work-progress)
       (incf (cadr (assoc ,entry work-progress)) 1)
       (error-message (concatenate 'string "Error: " (write-to-string ,entry) " not found in accumulatable work."))))
(defmacro progress (entry amount)
  `(>= (cadr (assoc ,entry work-progress)) ,amount))
(defmacro accumulate (ai-field &key (amount 1) (max 200))
  `(progn (incf ,ai-field ,amount)
	  (if (assoc current-goal work-progress)
	      (setf (cadr (assoc current-goal work-progress)) 0))
	  (if (>= ,ai-field ,max)
	      (setf (ai-entity-working ai) nil))))
(defmacro consume (ai-field amount)
  `(decf ,ai-field ,amount))

(defun work-ai ()
  (case (ai-entity-working ai)
    ;;food, water, and clay take 1 work-tick to collect 1 of each
    (food (incf (ai-entity-food ai) 1)
	  (if (>= (ai-entity-food ai) 500)
	      (setf (ai-entity-working ai) nil
		    (ai-entity-searching ai) t)))
    (water (incf (ai-entity-water ai) 1)
	   (if (>= (ai-entity-water ai) 500)
	       (setf (ai-entity-working ai) nil
		     (ai-entity-searching ai) t)))
    (clay (accumulate (ai-entity-clay ai)))
    ;;wood, iron, surplus, ingot take 3 ticks for 1
    (wood (work 'wood)
	  (if (progress 'wood 40)
	      (accumulate (ai-entity-wood ai))))
    (iron (work 'iron)
	  (if (progress 'iron 40)
	      (accumulate (ai-entity-iron ai))))
    (slate (work 'slate)
	   (if (progress 'slate 30)
	       (accumulate (ai-entity-slate ai))))
    (surplus-water (work 'surplus-water)
		   (if (progress 'surplus-water 5)
		       (accumulate (ai-entity-surplus-water ai))))
    (ingot (work 'ingot)
	   (if (progress 'ingot 30)
	       (progn (accumulate (ai-entity-ingot ai))
		      (consume (ai-entity-iron ai) 5)
		      (consume (ai-entity-wood ai) 10)))
	   (if (not (and (> (ai-entity-iron ai) 5)
			 (> (ai-entity-wood ai) 10)))
	       (setf (ai-entity-working ai) nil)))
    ;;mortar, brick, wood-block, nails take 8 ticks for 1
    (mortar (work 'mortar)
	  (if (progress 'mortar 64)
	      (progn (accumulate (ai-entity-mortar ai))
		     (consume (ai-entity-clay ai) 4))))
    (brick (work 'brick)
	  (if (progress 'brick 80)
	      (progn (accumulate (ai-entity-brick ai))
		     (consume (ai-entity-clay ai) 8)
		     (consume (ai-entity-surplus-water ai) 2))))
    (wood-block (work 'wood-block)
	  (if (progress 'wood-block 75)
	      (progn (accumulate (ai-entity-wood-block ai))
		     (consume (ai-entity-wood ai) 4))))
    (nails (work 'nails)
	   (if (progress 'nails 120)
	       (progn (accumulate (ai-entity-nails ai) :amount 20)
		      (consume (ai-entity-ingot ai) 1)
		      (consume (ai-entity-wood ai) 1))))
    ;;walls, roofs, doors take 20 for 1
    (walls (work 'walls)
	   (if (progress 'walls 200)
	       (progn (accumulate (ai-entity-walls ai))
		      (consume (ai-entity-brick ai) 32)
		      (consume (ai-entity-mortar ai) 16)
		      (consume (ai-entity-surplus-water ai) 8))))
    (roofs (work 'roofs)
	   (if (progress 'roofs 150)
	       (progn (accumulate (ai-entity-roofs ai))
		      (consume (ai-entity-slate ai) 40)
		      (consume (ai-entity-mortar ai) 40)
		      (consume (ai-entity-surplus-water ai) 20))))
    (doors (work 'doors)
	   (if (progress 'doors 100)
	       (progn (accumulate (ai-entity-doors ai))
		      (consume (ai-entity-wood-block ai) 5)
		      (consume (ai-entity-nails ai) 10))))
    ;;houses take 70 for 1
    (houses (work 'houses)
	    (if (progress 'houses 800)
		(progn (accumulate (ai-entity-houses ai))
		       (consume (ai-entity-walls ai) 4)
		       (consume (ai-entity-roofs ai) 1)
		       (consume (ai-entity-doors ai) 2)
		       (consume (ai-entity-mortar ai) 12)
		       (consume (ai-entity-surplus-water ai) 6))))
    ;;factories take 140
    (factory (work 'factory)
	     (if (progress 'factory 1600)
		 (progn (accumulate (ai-entity-factory ai))
			(consume (ai-entity-walls ai) 8)
			(consume (ai-entity-roofs ai) 4)
			(consume (ai-entity-doors ai) 16))))
    ;;electronics take 280
    (electronics (work 'electronics)
		 (if (progress 'electronics 500)
		     (progn (accumulate (ai-entity-electronics ai))
			    (consume (ai-entity-factory ai) 1))))
    ;;bots take 600
    (bots (work 'bots)
		 (if (progress 'bots 1000)
		     (progn (accumulate (ai-entity-bots ai))
			    (consume (ai-entity-electronics ai) 10)
			    (consume (ai-entity-ingot ai) 30))))
    ))

(defun test-status ()
  (let ((water (ai-entity-water ai))
	(food (ai-entity-food ai)))
    (if (< water 200)
	(setf (ai-entity-hydrated ai) nil)
	(if (>= water 400)
	    (setf (ai-entity-hydrated ai) t)))
    (if (< food 200)
	(setf (ai-entity-full ai) nil)
	(if (>= food 400)
	    (setf (ai-entity-full ai) t)))
    (if (and (< (ai-entity-water ai) 200)
	     (not (eq current-goal 'water)))
	(setf (ai-entity-searching ai) nil
	      (ai-entity-moving ai) t
	      (ai-entity-working ai) nil
	      current-goal 'water)
	(if (not (eq current-goal 'water))
	    (if (and (< (ai-entity-food ai) 200)
		     (not (eq current-goal 'food)))
		(setf (ai-entity-searching ai) nil
		      (ai-entity-moving ai) t
		      (ai-entity-working ai) nil
		      current-goal 'food))))))

(defun process-ai ()
  (if message-accumulator
      (if (< message-accumulator 300)
	  (incf message-accumulator 1)
	  (setf message-accumulator nil
		error-message "This is an error message")))
  (incf frame-ticks 1)
  (test-status)
  (if (eq frame-ticks 10)
      (progn (decf (ai-entity-food ai) 1)
	     (decf (ai-entity-water ai) 1)
	     (setf frame-ticks 0)))
  (if (ai-entity-searching ai)
      (check-supplies))
  (if (ai-entity-moving ai)
      (move-ai))
  (if (ai-entity-working ai)
      (work-ai))
  (if (not (or (ai-entity-searching ai)
	       (ai-entity-moving ai)
	       (ai-entity-working ai)))
      (setf (ai-entity-searching ai) t))
  )
(add-loop-function process-ai ai-test 'top)

(defun show-message ()
  (render-string error-message
		 0 0
		 :width 200
		 :height 16
		 :color +dark-steel-blue+))

(defun render-stats ()
  (let* ((full (if (ai-entity-full ai)
		   "full"
		   "hungry"))
	 (hydrated (if (ai-entity-hydrated ai)
		       "hydrated"
		       "thirsty boi"))
	 (food (ai-entity-food ai))
	 (slate (ai-entity-slate ai))
	 (wood (ai-entity-wood ai))
	 (water (ai-entity-water ai))
	 (surplus-water (ai-entity-surplus-water ai))
	 (clay (ai-entity-clay ai))
	 (iron (ai-entity-iron ai))
	 (mortar (ai-entity-mortar ai))
	 (ingot (ai-entity-ingot ai))
	 (brick (ai-entity-brick ai))
	 (wood-block (ai-entity-wood-block ai))
	 (nails (ai-entity-nails ai))
	 (walls (ai-entity-walls ai)) 
	 (roofs (ai-entity-roofs ai)) 
	 (doors (ai-entity-doors ai)) 
	 (houses (ai-entity-houses ai)) 
	 (factory (ai-entity-factory ai))
	 (electronics (ai-entity-electronics ai))
	 (bots (ai-entity-bots ai)))
    (render-string (start-string (combine-strings "Status: " full " " hydrated)
				 (combine-strings "Food: " food " Water: " water " Wood: " wood " Clay: " clay " Iron: " iron " Slate: " slate)
				 (combine-strings "Surplus water: " surplus-water " Mortar: " mortar " Ingot: " ingot
						  " Brick: " brick " Wood Blocks: " wood-block " Nails: " nails)
				 (combine-strings "Walls: " walls " Roofs: " roofs " Doors: " doors)
				 (combine-strings "Houses: " houses " Factories: " factory)
				 (combine-strings "Electronics: " electronics " bots: " bots))
		   0 600
		   :width 1366
		   :height (* 16 10)
		   :color +pastel-grey+)
    ))
(defun render-goal ()
  (render-string (combine-strings "Current goal: " current-goal)
		 0 64 :color '(0 255 255 255)))

(defun render-world ()
  (loop for area in work-areas
     do (render-box (cadr area)
		    (caddr area)
		    6 6
		    :color '(0 105 150 255)))
  (render-box (entity-x ai)
	      (entity-y ai)
	      4
	      4
	      :color +white+)
  (render-stats)
  (render-goal)
  (if message-accumulator
      (show-message))
  )
(add-to-state-render render-world ai-test)
