(defstruct (grapple-surface (:include entity))
  (grapple-able t)
  ;;tile-map
  )
(defstruct (player (:include entity
			     (x (round (/ *screen-width* 2)))
			     (y (round (* (/ *screen-height* 8) 7)))
			     (width 8)
			     (height 16)
			     (symbol-color +pastel-grey)))
  grappling
  grapple-texture 
  (grapple-position (make-vector-3d))
  (grapple-vector (make-vector-3d)))

(defvar +grapple-animation+ nil)
(defvar +grapple-points+ 0)
(defvar +current-grapple-point+ nil)
(defvar +pulling-player+ nil)
(defvar entities nil)
(defvar surfaces nil)
(defvar floor (make-entity))
(push 'floor entities)
(defvar grapple-wall-1 (make-grapple-surface))
(push 'grapple-wall-1 surfaces)
(defvar grapple-wall-2 (make-grapple-surface))
(push 'grapple-wall-2 surfaces)
(defvar player (make-player))
(push 'player entities)

(defun init-grapple-texture ()
  (setf (player-grapple-texture player) (create-texture renderer 32 1 8 16))
  (sdl2:texture-color-mod (player-grapple-texture player) (car +dark-pastel-grey+) (cadr +dark-pastel-grey+) (caddr +dark-pastel-grey)))

(defun grapple-fire ()
  (if (< +grapple-points+ 3)
      (let ((x nil)
	    (y nil))
	(setf (values x y) (sdl2:mouse-state))
	(setf (vector-3d-x (player-grapple-position player)) (entity-x player)
	      (vector-3d-y (player-grapple-position player)) (entity-y player)
	      (vector-3d-x (player-grapple-vector player)) (if (> x (entity-x player))
							       (round (/ (- x (entity-x player)) 4))
							       (round (/ (- (entity-x player) x) 4)))
	      (vector-3d-y (player-grapple-vector player)) (if (> y (entity-y player))
							       (round (/ (- y (entity-y player)) 4))
							       (round (/ (- (entity-y player) y) 4)))
	      +current-grapple-point+ (list x y)))))

(defun process-grapples ()
  (if +pulling-player+
      (progn (incf (entity-x player) (vector-3d-x (player-grapple-vector player)))
	     (incf (entity-y player) (vector-3d-y (player-grapple-vector player)))
	     (if (and (eq (entity-x player) (vector-3d-x (player-grapple-position player)))
		      (eq (entity-y player) (vector-3d-y (player-grapple-position player))))
		 (setf +pulling-player+ nil
		       (vector-3d-x (player-grapple-vector player)) 0
		       (vector-3d-y (player-grapple-vector player)) 0))))
  (if +current-grapple-point+
      (if (not +grapple-animation+)
	  (setf +grapple-animation+ 0))
      (progn (incf (vector-3d-x (player-grapple-position player)) (vector-3d-x (player-grapple-vector player)))
	     (incf (vector-3d-y (player-grapple-position player)) (vector-3d-y (player-grapple-vector player)))
	     (if (>= +grapple-animation+ 40)
		 (progn (setf +current-grapple-point+ nil
			      +pulling-player+ t)
			(incf +grapple-points+ 1))
		 (incf +grapple-animation+ 10)))))
(add-loop-function level :top process-grapples)

(defun render-grapple ()
  (let ((w (if (> (abs (vector-3d-x (player-grapple-vector player))) 16)
	       (if (> (vector-3d-x (player-grapple-position player)) (entity-x player))
		   (- (vector-3d-x (player-grapple-position player)) (entity-x player))
		   (- (entity-x player) (vector-3d-x (player-grapple-position player))))
	       8))
	(h (if (> (abs (vector-3d-y (player-grapple-vector player))) 16)
	       (if (> (vector-3d-y (player-grapple-position player)) (entity-y player))
		   (- (vector-3d-y (player-grapple-position player)) (entity-y player))
		   (- (entity-y player) (vector-3d-y (player-grapple-position player))))
	       8)))
    (if +current-grapple-point+
	(tex-blit (player-grapple-texture player)
		  :dest (sdl2:make-rect (entity-x player)
					(entity-y player)
					w
					h)
		  :angle (round (find-angle (vector-3d-x (player-grapple-vector player))
					    (vector-3d-y (player-grapple-vector player))))))))
(add-to-state-render render-grapple level)
